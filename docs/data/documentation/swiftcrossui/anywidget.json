{"variants":[{"paths":["\/documentation\/swiftcrossui\/anywidget"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"metadata":{"symbolKind":"class","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyWidget","kind":"identifier"}],"remoteSource":{"url":"https:\/\/github.com\/stackotter\/swift-cross-ui\/blob\/main\/Sources\/SwiftCrossUI\/Backend\/AnyWidget.swift#L10","fileName":"AnyWidget.swift"},"role":"symbol","modules":[{"name":"SwiftCrossUI"}],"externalID":"s:12SwiftCrossUI9AnyWidgetC","roleHeading":"Class","navigatorTitle":[{"text":"AnyWidget","kind":"identifier"}],"title":"AnyWidget"},"abstract":[{"type":"text","text":"A type-erased widget which can be stored without having to propagate"},{"type":"text","text":" "},{"type":"text","text":"the selected backend type through the type system of the whole view graph"},{"type":"text","text":" "},{"type":"text","text":"system of types, which would leak it back into user view implementations"},{"type":"text","text":" "},{"type":"text","text":"making the backend hard to switch for developers."}],"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/LayoutSystem","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/EitherView","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/EmptyView","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/OptionalView","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/HotReloadableView","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ViewSize","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ViewUpdateResult","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/PublishedMarkerProtocol","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/DynamicProperty","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/View-graph","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/Scene-graph"]}],"topicSections":[{"title":"Initializers","anchor":"Initializers","generated":true,"identifiers":["doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/AnyWidget\/init(_:)"]},{"title":"Instance Methods","anchor":"Instance-Methods","generated":true,"identifiers":["doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/AnyWidget\/concreteWidget(for:)","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/AnyWidget\/into()"]}],"kind":"symbol","schemaVersion":{"major":0,"patch":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI"]]},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyWidget"}]}]},{"content":[{"level":2,"text":"Overview","anchor":"overview","type":"heading"},{"inlineContent":[{"type":"text","text":"Uses the simplest kind of type erasure because we always know the"},{"type":"text","text":" "},{"type":"text","text":"widget type at time of use anyway so it can simply be cast back to"},{"type":"text","text":" "},{"type":"text","text":"a concrete type before use (removing the need to type-erase specific"},{"type":"text","text":" "},{"type":"text","text":"methods or anything like that)."}],"type":"paragraph"}],"kind":"content"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/AnyWidget"},"references":{"doc://SwiftCrossUI/documentation/SwiftCrossUI/View-graph":{"abstract":[],"role":"collectionGroup","title":"View graph","type":"topic","kind":"article","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/View-graph","url":"\/documentation\/swiftcrossui\/view-graph"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/PublishedMarkerProtocol":{"title":"PublishedMarkerProtocol","role":"symbol","url":"\/documentation\/swiftcrossui\/publishedmarkerprotocol","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"PublishedMarkerProtocol"}],"navigatorTitle":[{"kind":"identifier","text":"PublishedMarkerProtocol"}],"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/PublishedMarkerProtocol","abstract":[{"type":"reference","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ObservableObject","isActive":true},{"type":"text","text":" values nested within an "},{"type":"reference","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ObservableObject","isActive":true},{"type":"text","text":" object"},{"type":"text","text":" "},{"type":"text","text":"will only have their changes published by the parent "},{"type":"reference","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ObservableObject","isActive":true},{"type":"text","text":" "},{"type":"text","text":"if marked with this marker protocol. This avoids uncertainty around which"},{"type":"text","text":" "},{"type":"text","text":"properties will or will not have their changes published by the parent."},{"type":"text","text":" "},{"type":"text","text":"For clarity reasons, you shouldn’t conform your own types to this protocol."},{"type":"text","text":" "},{"type":"text","text":"Instead, apply the "},{"type":"reference","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/Published","isActive":true},{"type":"text","text":" property wrapper when needed."}],"type":"topic"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/Published":{"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Published","kind":"identifier"}],"title":"Published","navigatorTitle":[{"text":"Published","kind":"identifier"}],"role":"symbol","type":"topic","url":"\/documentation\/swiftcrossui\/published","kind":"symbol","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/Published","abstract":[{"type":"text","text":"A wrapper which publishes a change whenever the wrapped value is set. If"},{"type":"text","text":" "},{"type":"text","text":"the wrapped value is "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ObservableObject"},{"type":"text","text":", its "},{"type":"codeVoice","code":"didChange"},{"type":"text","text":" publisher will"},{"type":"text","text":" "},{"type":"text","text":"also be forwarded to the wrapper’s publisher."}]},"doc://SwiftCrossUI/documentation/SwiftCrossUI/OptionalView":{"abstract":[{"text":"A view used by ","type":"text"},{"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ViewBuilder","isActive":true,"type":"reference"},{"text":" to support non-exhaustive if statements.","type":"text"}],"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/OptionalView","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"OptionalView"}],"navigatorTitle":[{"kind":"identifier","text":"OptionalView"}],"kind":"symbol","type":"topic","title":"OptionalView","url":"\/documentation\/swiftcrossui\/optionalview","role":"symbol"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/AnyWidget/concreteWidget(for:)":{"role":"symbol","type":"topic","abstract":[{"text":"Converts the widget back to its original concrete type. If the requested","type":"text"},{"text":" ","type":"text"},{"text":"type doesn’t match its original type then the method will crash.","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"concreteWidget","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Backend","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"for","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Backend","kind":"typeIdentifier"},{"text":".Type) -> ","kind":"text"},{"text":"Backend","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Widget","preciseIdentifier":"s:12SwiftCrossUI10AppBackendP6WidgetQa","kind":"typeIdentifier"}],"kind":"symbol","title":"concreteWidget(for:)","url":"\/documentation\/swiftcrossui\/anywidget\/concretewidget(for:)","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/AnyWidget\/concreteWidget(for:)"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/ViewUpdateResult":{"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ViewUpdateResult","url":"\/documentation\/swiftcrossui\/viewupdateresult","navigatorTitle":[{"text":"ViewUpdateResult","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ViewUpdateResult","kind":"identifier"}],"kind":"symbol","type":"topic","abstract":[],"title":"ViewUpdateResult","role":"symbol"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/ViewBuilder":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ViewBuilder","kind":"identifier"}],"abstract":[{"text":"A result builder used to compose views together into composite views in","type":"text"},{"text":" ","type":"text"},{"text":"a declarative manner.","type":"text"}],"navigatorTitle":[{"text":"ViewBuilder","kind":"identifier"}],"title":"ViewBuilder","type":"topic","url":"\/documentation\/swiftcrossui\/viewbuilder","kind":"symbol","role":"symbol","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ViewBuilder"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/Scene-graph":{"title":"Scene graph","url":"\/documentation\/swiftcrossui\/scene-graph","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/Scene-graph","abstract":[],"type":"topic","kind":"article","role":"collectionGroup"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/HotReloadableView":{"kind":"symbol","role":"symbol","url":"\/documentation\/swiftcrossui\/hotreloadableview","navigatorTitle":[{"kind":"identifier","text":"HotReloadableView"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HotReloadableView"}],"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/HotReloadableView","title":"HotReloadableView","abstract":[{"type":"text","text":"A view which attempts to persist the state of its view subtree even"},{"type":"text","text":" "},{"type":"text","text":"when the subtree’s structure changes. Uses state serialization (via"},{"type":"text","text":" "},{"type":"text","text":"view graph snapshotting) to persist view state even when a child"},{"type":"text","text":" "},{"type":"text","text":"view’s implementation gets swapped out with an implementation from"},{"type":"text","text":" "},{"type":"text","text":"a newly-loaded dylib (this is what makes this useful for hot reloading)."}],"type":"topic"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/AnyWidget/init(_:)":{"role":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Any","kind":"keyword"},{"text":")","kind":"text"}],"kind":"symbol","url":"\/documentation\/swiftcrossui\/anywidget\/init(_:)","type":"topic","title":"init(_:)","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/AnyWidget\/init(_:)","abstract":[{"text":"Erases the specific type of a widget (to allow storage without propagating","type":"text"},{"text":" ","type":"text"},{"text":"the selected backend type through the whole type system).","type":"text"}]},"doc://SwiftCrossUI/documentation/SwiftCrossUI/ObservableObject":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ObservableObject"}],"kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ObservableObject"}],"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ObservableObject","title":"ObservableObject","abstract":[{"text":"An object that can be observed for changes.","type":"text"}],"type":"topic","url":"\/documentation\/swiftcrossui\/observableobject"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/ViewSize":{"url":"\/documentation\/swiftcrossui\/viewsize","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ViewSize","role":"symbol","title":"ViewSize","navigatorTitle":[{"kind":"identifier","text":"ViewSize"}],"type":"topic","abstract":[{"text":"The size of a view. Includes ideal size, and minimum\/maximum width and height","type":"text"},{"text":" ","type":"text"},{"text":"along with the size you’d expect.","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ViewSize"}]},"doc://SwiftCrossUI/documentation/SwiftCrossUI/AnyWidget/into()":{"type":"topic","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"into"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">() -> "},{"kind":"typeIdentifier","text":"T"}],"title":"into()","abstract":[{"text":"Converts the widget back to its original concrete type. If the requested","type":"text"},{"text":" ","type":"text"},{"text":"type doesn’t match its original type then the method will crash. Often","type":"text"},{"text":" ","type":"text"},{"text":"more concise than using ","type":"text"},{"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/AnyWidget\/concreteWidget(for:)","type":"reference","isActive":true},{"text":".","type":"text"}],"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/AnyWidget\/into()","url":"\/documentation\/swiftcrossui\/anywidget\/into()"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/View":{"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"View"}],"title":"View","url":"\/documentation\/swiftcrossui\/view","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"View"}],"type":"topic","abstract":[{"text":"A view that can be rendered by any backend.","type":"text"}],"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/View","kind":"symbol"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/EmptyView":{"title":"EmptyView","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"A placeholder view used by elementary "},{"isActive":true,"type":"reference","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/View"},{"type":"text","text":" implementations which don’t have bodies. Fatally"},{"type":"text","text":" "},{"type":"text","text":"crashes if rendered."}],"type":"topic","url":"\/documentation\/swiftcrossui\/emptyview","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"EmptyView"}],"navigatorTitle":[{"kind":"identifier","text":"EmptyView"}],"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/EmptyView"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/EitherView":{"kind":"symbol","title":"EitherView","abstract":[{"type":"text","text":"A view used by "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ViewBuilder"},{"type":"text","text":" to support if\/else conditional statements."}],"role":"symbol","type":"topic","url":"\/documentation\/swiftcrossui\/eitherview","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/EitherView","navigatorTitle":[{"text":"EitherView","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EitherView","kind":"identifier"}]},"doc://SwiftCrossUI/documentation/SwiftCrossUI/DynamicProperty":{"abstract":[{"type":"text","text":"A property wrapper updated by the view graph before each access to"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/View\/body"},{"type":"text","text":". Conforming types should use internal mutability (see "},{"type":"codeVoice","code":"Box"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"to implement this protocol’s non-mutable methods if required. This"},{"type":"text","text":" "},{"type":"text","text":"protocol avoids mutation to allow state properties and such to be"},{"type":"text","text":" "},{"type":"text","text":"captured even though views are structs."}],"kind":"symbol","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/DynamicProperty","url":"\/documentation\/swiftcrossui\/dynamicproperty","title":"DynamicProperty","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"DynamicProperty"}],"navigatorTitle":[{"kind":"identifier","text":"DynamicProperty"}],"type":"topic"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/LayoutSystem":{"type":"topic","title":"LayoutSystem","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/LayoutSystem","url":"\/documentation\/swiftcrossui\/layoutsystem","role":"symbol","navigatorTitle":[{"text":"LayoutSystem","kind":"identifier"}],"kind":"symbol","abstract":[],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LayoutSystem","kind":"identifier"}]},"doc://SwiftCrossUI/documentation/SwiftCrossUI/AnyWidget":{"title":"AnyWidget","abstract":[{"type":"text","text":"A type-erased widget which can be stored without having to propagate"},{"type":"text","text":" "},{"type":"text","text":"the selected backend type through the type system of the whole view graph"},{"type":"text","text":" "},{"type":"text","text":"system of types, which would leak it back into user view implementations"},{"type":"text","text":" "},{"type":"text","text":"making the backend hard to switch for developers."}],"kind":"symbol","navigatorTitle":[{"text":"AnyWidget","kind":"identifier"}],"type":"topic","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyWidget","kind":"identifier"}],"url":"\/documentation\/swiftcrossui\/anywidget","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/AnyWidget","role":"symbol"},"doc://SwiftCrossUI/documentation/SwiftCrossUI":{"role":"collection","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI","url":"\/documentation\/swiftcrossui","title":"SwiftCrossUI","abstract":[{"type":"text","text":"Create cross-platform desktop apps for macOS, Linux, Windows, iOS and tvOS."}],"type":"topic","kind":"symbol"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/View/body":{"type":"topic","defaultImplementations":1,"abstract":[{"type":"text","text":"The view’s contents."}],"url":"\/documentation\/swiftcrossui\/view\/body","kind":"symbol","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/View\/body","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"body","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:12SwiftCrossUI4ViewP7ContentQa","text":"Content","kind":"typeIdentifier"}],"role":"symbol","required":true,"title":"body"}}}