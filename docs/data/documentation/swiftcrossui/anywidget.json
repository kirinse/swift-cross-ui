{"kind":"symbol","abstract":[{"text":"A type-erased widget which can be stored without having to propagate","type":"text"},{"text":" ","type":"text"},{"text":"the selected backend type through the type system of the whole view graph","type":"text"},{"text":" ","type":"text"},{"text":"system of types, which would leak it back into user view implementations","type":"text"},{"text":" ","type":"text"},{"text":"making the backend hard to switch for developers.","type":"text"}],"variants":[{"paths":["\/documentation\/swiftcrossui\/anywidget"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/AnyWidget"},"schemaVersion":{"patch":0,"major":0,"minor":3},"topicSections":[{"identifiers":["doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/AnyWidget\/init(_:)"],"title":"Initializers","anchor":"Initializers","generated":true},{"identifiers":["doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/AnyWidget\/concreteWidget(for:)","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/AnyWidget\/into()"],"title":"Instance Methods","anchor":"Instance-Methods","generated":true}],"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyWidget"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"content":[{"type":"heading","level":2,"anchor":"overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"Uses the simplest kind of type erasure because we always know the","type":"text"},{"text":" ","type":"text"},{"text":"widget type at time of use anyway so it can simply be cast back to","type":"text"},{"text":" ","type":"text"},{"text":"a concrete type before use (removing the need to type-erase specific","type":"text"},{"text":" ","type":"text"},{"text":"methods or anything like that).","type":"text"}]}],"kind":"content"}],"sections":[],"hierarchy":{"paths":[["doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI"]]},"seeAlsoSections":[{"identifiers":["doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/LayoutSystem","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/EitherView","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/EmptyView","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/OptionalView","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/HotReloadableView","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ViewSize","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ViewUpdateResult","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/PublishedMarkerProtocol","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/DynamicProperty","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/View-graph","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/Scene-graph"],"generated":true}],"metadata":{"symbolKind":"class","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyWidget","kind":"identifier"}],"modules":[{"name":"SwiftCrossUI"}],"roleHeading":"Class","externalID":"s:12SwiftCrossUI9AnyWidgetC","navigatorTitle":[{"text":"AnyWidget","kind":"identifier"}],"title":"AnyWidget","role":"symbol","remoteSource":{"fileName":"AnyWidget.swift","url":"https:\/\/github.com\/stackotter\/swift-cross-ui\/blob\/main\/Sources\/SwiftCrossUI\/Backend\/AnyWidget.swift#L10"}},"references":{"doc://SwiftCrossUI/documentation/SwiftCrossUI/ObservableObject":{"navigatorTitle":[{"text":"ObservableObject","kind":"identifier"}],"title":"ObservableObject","kind":"symbol","type":"topic","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ObservableObject","url":"\/documentation\/swiftcrossui\/observableobject","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ObservableObject","kind":"identifier"}],"abstract":[{"type":"text","text":"An object that can be observed for changes."}]},"doc://SwiftCrossUI/documentation/SwiftCrossUI":{"kind":"symbol","abstract":[{"type":"text","text":"Create cross-platform desktop apps for macOS, Linux, Windows, iOS and tvOS."}],"url":"\/documentation\/swiftcrossui","role":"collection","type":"topic","title":"SwiftCrossUI","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/EitherView":{"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/EitherView","url":"\/documentation\/swiftcrossui\/eitherview","title":"EitherView","abstract":[{"type":"text","text":"A view used by "},{"type":"reference","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ViewBuilder","isActive":true},{"type":"text","text":" to support if\/else conditional statements."}],"navigatorTitle":[{"text":"EitherView","kind":"identifier"}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EitherView","kind":"identifier"}],"kind":"symbol","type":"topic"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/EmptyView":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"EmptyView"}],"navigatorTitle":[{"kind":"identifier","text":"EmptyView"}],"title":"EmptyView","type":"topic","abstract":[{"text":"A placeholder view used by elementary ","type":"text"},{"isActive":true,"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/View","type":"reference"},{"text":" implementations which don’t have bodies. Fatally","type":"text"},{"text":" ","type":"text"},{"text":"crashes if rendered.","type":"text"}],"url":"\/documentation\/swiftcrossui\/emptyview","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/EmptyView","kind":"symbol","role":"symbol"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/View/body":{"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/View\/body","kind":"symbol","abstract":[{"type":"text","text":"The view’s contents."}],"defaultImplementations":1,"url":"\/documentation\/swiftcrossui\/view\/body","title":"body","role":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"body","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Content","kind":"typeIdentifier","preciseIdentifier":"s:12SwiftCrossUI4ViewP7ContentQa"}],"type":"topic","required":true},"doc://SwiftCrossUI/documentation/SwiftCrossUI/LayoutSystem":{"title":"LayoutSystem","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/LayoutSystem","role":"symbol","type":"topic","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LayoutSystem","kind":"identifier"}],"url":"\/documentation\/swiftcrossui\/layoutsystem","abstract":[],"kind":"symbol","navigatorTitle":[{"text":"LayoutSystem","kind":"identifier"}]},"doc://SwiftCrossUI/documentation/SwiftCrossUI/AnyWidget":{"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/AnyWidget","abstract":[{"type":"text","text":"A type-erased widget which can be stored without having to propagate"},{"type":"text","text":" "},{"type":"text","text":"the selected backend type through the type system of the whole view graph"},{"type":"text","text":" "},{"type":"text","text":"system of types, which would leak it back into user view implementations"},{"type":"text","text":" "},{"type":"text","text":"making the backend hard to switch for developers."}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyWidget"}],"navigatorTitle":[{"kind":"identifier","text":"AnyWidget"}],"title":"AnyWidget","type":"topic","kind":"symbol","url":"\/documentation\/swiftcrossui\/anywidget","role":"symbol"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/AnyWidget/init(_:)":{"abstract":[{"type":"text","text":"Erases the specific type of a widget (to allow storage without propagating"},{"type":"text","text":" "},{"type":"text","text":"the selected backend type through the whole type system)."}],"url":"\/documentation\/swiftcrossui\/anywidget\/init(_:)","role":"symbol","title":"init(_:)","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/AnyWidget\/init(_:)","type":"topic","kind":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Any","kind":"keyword"},{"text":")","kind":"text"}]},"doc://SwiftCrossUI/documentation/SwiftCrossUI/View":{"url":"\/documentation\/swiftcrossui\/view","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"View"}],"type":"topic","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/View","abstract":[{"text":"A view that can be rendered by any backend.","type":"text"}],"title":"View","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"View"}],"kind":"symbol"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/HotReloadableView":{"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HotReloadableView","kind":"identifier"}],"title":"HotReloadableView","type":"topic","abstract":[{"type":"text","text":"A view which attempts to persist the state of its view subtree even"},{"type":"text","text":" "},{"type":"text","text":"when the subtree’s structure changes. Uses state serialization (via"},{"type":"text","text":" "},{"type":"text","text":"view graph snapshotting) to persist view state even when a child"},{"type":"text","text":" "},{"type":"text","text":"view’s implementation gets swapped out with an implementation from"},{"type":"text","text":" "},{"type":"text","text":"a newly-loaded dylib (this is what makes this useful for hot reloading)."}],"navigatorTitle":[{"text":"HotReloadableView","kind":"identifier"}],"url":"\/documentation\/swiftcrossui\/hotreloadableview","kind":"symbol","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/HotReloadableView"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/Published":{"type":"topic","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/Published","kind":"symbol","abstract":[{"text":"A wrapper which publishes a change whenever the wrapped value is set. If","type":"text"},{"text":" ","type":"text"},{"text":"the wrapped value is ","type":"text"},{"isActive":true,"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ObservableObject","type":"reference"},{"text":", its ","type":"text"},{"code":"didChange","type":"codeVoice"},{"text":" publisher will","type":"text"},{"text":" ","type":"text"},{"text":"also be forwarded to the wrapper’s publisher.","type":"text"}],"title":"Published","role":"symbol","navigatorTitle":[{"text":"Published","kind":"identifier"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Published","kind":"identifier"}],"url":"\/documentation\/swiftcrossui\/published"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/AnyWidget/into()":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"into"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">() -> "},{"kind":"typeIdentifier","text":"T"}],"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/AnyWidget\/into()","abstract":[{"type":"text","text":"Converts the widget back to its original concrete type. If the requested"},{"type":"text","text":" "},{"type":"text","text":"type doesn’t match its original type then the method will crash. Often"},{"type":"text","text":" "},{"type":"text","text":"more concise than using "},{"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/AnyWidget\/concreteWidget(for:)","type":"reference","isActive":true},{"type":"text","text":"."}],"role":"symbol","kind":"symbol","title":"into()","type":"topic","url":"\/documentation\/swiftcrossui\/anywidget\/into()"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/AnyWidget/concreteWidget(for:)":{"role":"symbol","url":"\/documentation\/swiftcrossui\/anywidget\/concretewidget(for:)","abstract":[{"type":"text","text":"Converts the widget back to its original concrete type. If the requested"},{"type":"text","text":" "},{"type":"text","text":"type doesn’t match its original type then the method will crash."}],"type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"concreteWidget","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Backend","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"for","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Backend","kind":"typeIdentifier"},{"text":".Type) -> ","kind":"text"},{"text":"Backend","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Widget","kind":"typeIdentifier","preciseIdentifier":"s:12SwiftCrossUI10AppBackendP6WidgetQa"}],"kind":"symbol","title":"concreteWidget(for:)","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/AnyWidget\/concreteWidget(for:)"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/ViewSize":{"abstract":[{"type":"text","text":"The size of a view. Includes ideal size, and minimum\/maximum width and height"},{"type":"text","text":" "},{"type":"text","text":"along with the size you’d expect."}],"kind":"symbol","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ViewSize","role":"symbol","url":"\/documentation\/swiftcrossui\/viewsize","navigatorTitle":[{"kind":"identifier","text":"ViewSize"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ViewSize"}],"type":"topic","title":"ViewSize"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/DynamicProperty":{"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/DynamicProperty","url":"\/documentation\/swiftcrossui\/dynamicproperty","abstract":[{"type":"text","text":"A property wrapper updated by the view graph before each access to"},{"type":"text","text":" "},{"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/View\/body","type":"reference","isActive":true},{"type":"text","text":". Conforming types should use internal mutability (see "},{"type":"codeVoice","code":"Box"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"to implement this protocol’s non-mutable methods if required. This"},{"type":"text","text":" "},{"type":"text","text":"protocol avoids mutation to allow state properties and such to be"},{"type":"text","text":" "},{"type":"text","text":"captured even though views are structs."}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"DynamicProperty"}],"type":"topic","title":"DynamicProperty","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"DynamicProperty"}],"role":"symbol"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/ViewUpdateResult":{"type":"topic","url":"\/documentation\/swiftcrossui\/viewupdateresult","abstract":[],"navigatorTitle":[{"text":"ViewUpdateResult","kind":"identifier"}],"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ViewUpdateResult","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ViewUpdateResult","kind":"identifier"}],"kind":"symbol","title":"ViewUpdateResult"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/PublishedMarkerProtocol":{"role":"symbol","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/PublishedMarkerProtocol","title":"PublishedMarkerProtocol","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PublishedMarkerProtocol","kind":"identifier"}],"url":"\/documentation\/swiftcrossui\/publishedmarkerprotocol","type":"topic","abstract":[{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ObservableObject"},{"type":"text","text":" values nested within an "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ObservableObject"},{"type":"text","text":" object"},{"type":"text","text":" "},{"type":"text","text":"will only have their changes published by the parent "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ObservableObject"},{"type":"text","text":" "},{"type":"text","text":"if marked with this marker protocol. This avoids uncertainty around which"},{"type":"text","text":" "},{"type":"text","text":"properties will or will not have their changes published by the parent."},{"type":"text","text":" "},{"type":"text","text":"For clarity reasons, you shouldn’t conform your own types to this protocol."},{"type":"text","text":" "},{"type":"text","text":"Instead, apply the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/Published"},{"type":"text","text":" property wrapper when needed."}],"navigatorTitle":[{"text":"PublishedMarkerProtocol","kind":"identifier"}]},"doc://SwiftCrossUI/documentation/SwiftCrossUI/OptionalView":{"type":"topic","abstract":[{"type":"text","text":"A view used by "},{"type":"reference","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ViewBuilder","isActive":true},{"type":"text","text":" to support non-exhaustive if statements."}],"url":"\/documentation\/swiftcrossui\/optionalview","title":"OptionalView","role":"symbol","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/OptionalView","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"OptionalView"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"OptionalView"}]},"doc://SwiftCrossUI/documentation/SwiftCrossUI/View-graph":{"title":"View graph","kind":"article","abstract":[],"role":"collectionGroup","type":"topic","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/View-graph","url":"\/documentation\/swiftcrossui\/view-graph"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/ViewBuilder":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ViewBuilder","kind":"identifier"}],"url":"\/documentation\/swiftcrossui\/viewbuilder","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ViewBuilder","type":"topic","abstract":[{"text":"A result builder used to compose views together into composite views in","type":"text"},{"text":" ","type":"text"},{"text":"a declarative manner.","type":"text"}],"navigatorTitle":[{"text":"ViewBuilder","kind":"identifier"}],"kind":"symbol","title":"ViewBuilder","role":"symbol"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/Scene-graph":{"abstract":[],"url":"\/documentation\/swiftcrossui\/scene-graph","role":"collectionGroup","kind":"article","type":"topic","title":"Scene graph","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/Scene-graph"}}}